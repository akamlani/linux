"Building Kernel" INSTRUCTIONS
================================================================================
The linux kernel (uImage) is the next stage after U-Boot is executed
It is also responsible for mounting the rootfs and executing /sbin/init

1.  The most stable source for the linux kernel is 2.6.35
    However the git branch (origin/omap3-2.6.35) is the most stable, not the label (v2.6.35)
    git clone git://www.sakoman.com/git/linux-omap-2.6 linux-omap-2.6 
    git checkout --track -f -b omap3-2.6.35_local origin/omap3-2.6.35

    The source with proper configuration and patches has already been checked in as:
    <svn>/Gumstix/src/kernel-omap3-2.6.35-branch.tgz

    Patches can be found here:
    <svn>/Gumstix/patches/kernel/*

2.  The firmware for wireless lan is not included
    Note that is has already been included in the version checked into svn
    It is just not included in the default git respository

    The firmware is checked in as <svn>/Gumstix/firmware/sd8686*
    Copy these files into /lib/firmware of the filesystem (rootfs) before compiling
    cp -avrf <svn>/Gumstix/firmware/sd8686* ${SV_BUILD_PATH}/fileys/rootfs/lib/firmware

    The firmware is also built in directly to the kernel in contrast to Angstrom image 
    <Reference HowTo-MakeRootfs, HowTo-MakeRamfs for filesystem>

3.  Configuring the kernel
    The kernel needs to have the custom kernel configuration setup for Gumstix
    We use 2 different configurations, based on the type of image
    ramfs: update-loader-image (this is for wireless update partition)
    mtd nand:  uImage (this is for normal operation)

    configuration files:
    ramfs: <svn>/Gumstix/configs/config_ramfs_kernel_2.6.35
    mtd:   <svn>/Gumstix/configs/config_kernel_2.6.35

    <copy the appropriate configuration file based on build selection (ramfs kernel or mtd kernel)> 
    cp -avrf <svn>/Gumstix/configs/<config_file_name>  ${SV_BUILD_PATH}/src/<kernel src>/.config

    You may want to keep different source trees based on configuration (linux-omap-2.6,linux-omap-2.6-ramfs)
    Note that we use our own custom configuration, not the default Overo config for Gumstix

4.  Buildling the kernel
    Precondition: (HowTo-SetupHostEnv or HowTo-CrossCompile)
    WARNING: THIS STEP MUST BE DONE BEFOREHAND OR COMPILE WILL FAIL.

    (i)  basic/minimal description (common usage - in this order)
    <parse new .config file copied>
    make oldconfig     
    <build kernel>
    make uImage -j8    (using -j8 for # cpu cores), even though not as many on host)
    <build kernel modules, *.ko files> (we only use for networking currently)
    make modules -j8   (to build kernel modules (=m) selection in .config )
    <export modules to staging area> 
    make INSTALL_MOD_PATH=${SV_STAGING_PATH}/modules-2.6.35 modules_install

    Note the ramfs kernel may need to be compiled as root (sudo su -) on linux host
    This can be done from any location on the host pc command prompt

    (ii) additional build options
    <to change any features of kernel, select accordingly>
    make menuconfig    
    <clean the object files>
    make clean         
    <find mismatched section in kernel>
    make CONFIG_DEBUG_SECTION_MISMATCH=y 
    <export headers of kernel>
    make INSTALL_HDR_PATH=usr headers_install       
    <remove path references in usr/include, to be copied to rootfs>
    find usr/include \( -name .install -o -name ..install.cmd \) -delete   

5.  Binaries Produced
    Kernel binaries (uImage) will be produced in <kernel top dir>/arch/arm/boot/

    Note that both types will have an output binary name of uImage
    Rename uImage to update-loader-image for ramfs based image 

    ramfs: mv arch/arm/boot/uImage arch/arm/boot/update-loader-image
    mtd nand: <no changes>

6.  Copy the modules generated from staging area to rootfs
    cp -avrf ${SV_STAGING_PATH}/modules-2.6.35/  ${SV_BUILD_PATH}/filesys/rootfs 
    <Reference Howto-BeginRootfs regarding Kernel Modules Section>
    
